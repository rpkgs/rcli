#!/usr/bin/env Rscript

# dt_merge <pattern> [options] 

'dt_merge

Usage: 
    dt_merge --files FILES... [options]
    dt_merge [options]
    dt_merge (-h | --help)

Examples:
    "dt_merge cyl"

Options:
    -h --help               show help document
    FILES                   csv file lists, (default NULL)
    -i --indir DIR          specify output file [default: .]
    -p --pattern PATTERN    repr pattern for csv files [default: *.csv]
    -o --outfile ofile      specify output file [default: ./out.csv]
    -q --quit               quit pipe? (default false)
    -v --verbose            whether print comamnd?
' -> doc


suppressMessages({
  library(purrr)
  library(docopt)
  library(data.table)
  library(magrittr)
  library(crayon)
})
ok <- function(fmt, ...) cat(green(sprintf(fmt, ...)), sep = "\n")

opt <- docopt(doc, version = 'hello.R')
# set default
opt$pattern %<>% `%||%`("*.csv")

# if (opt$verbose) 
print(opt)

## HELPER functions -----------------------------------------------------------
fprintf <- function (fmt, ...) cat(sprintf(fmt, ...))

get_files <- function(files=NULL, pattern="*.csv", indir=".") {
  if (is.null(files) || length(files) == 0) {
    indir2 = dirname(pattern)
    indir = ifelse(indir != ".", indir2, indir)  
    files = dir(indir, basename(pattern))
  }
  files # return
}

read_data <- function(input) {
  if (!file.exists(input)) {
    stop("[input]: not found: ", input)
  }
  ext <- tolower(tools::file_ext(input))
  switch(ext,
    # csv = readr::read_csv(input, col_types = readr::cols()),
    csv = fread(input),
    rds = readRDS(input),
    stop("Unknown file extension: ", ext)
  )
}

fread2 <- function(files, outfile=NULL, fun = fread, ...) {
  lst = purrr::map(files, fun, ...)
  df = do.call(rbind, lst)
  if (!is.null(outfile)) {
    ok("[write]: to %s", outfile)
    fwrite(df, outfile)
  }
  df
}

## PARAMETER PROCESS
files = with(opt, get_files(FILES, pattern, indir))

if (opt$verbose) {
  print(files)
} else {
  data = fread2(files, opt$outfile)
  print(data)
}

# input = opt$file
# print(input)

# if (input == "stdin") {
#   if (opt$verbose) message("[input] reading CSV from stdin")
#   input <- readLines(input) |> trimws()
#   .data <- readr::read_csv(I(input), col_types = readr::cols())
# } else {
#   if (opt$verbose) message("[input] looks like an existing file: ", input)
#   .data <- read_data(input)
# }
# print(.data)

