#!/usr/bin/env Rscript


'dtplyr

Usage: 
    dtplyr --files FILES...
    dtplyt args...
    dtplyr [options] 
    dtplyr <command> [<expression>] [options] 
    dtplyr (-h | --help)

Examples:
    dtplyr cyl

Options:
    --debug                 debug? 
    -h --help               show help document
    -i --infile FILE        cvs file path; If reading from stdin, assumes CSV [default: out.csv]
    -o --outfile ofile      specify output file [default: out.csv]
    --command CMD           operation, e.g. `select`, `mutate`, `filter` [default: filter]
    -q --quit               quit pipe? (default false)
    -v --verbose            whether print comamnd?
' -> doc

suppressMessages({
  library(purrr)
  library(docopt)
  library(data.table)
  library(dplyr)
  library(magrittr)
  library(crayon)
})

print2 <- function(...) try(print(...), silent = TRUE)
sprintf2 <- function(...) try(sprintf(...), silent = TRUE)

fprintf <- function(fmt, ...) cat(sprintf2(fmt, ...))
ok <- function(fmt, ...) cat(green(sprintf2(fmt, ...)), sep = "\n")
warn <- function(fmt, ...) cat(red(sprintf2(fmt, ...)), sep = "\n")

opt <- docopt(doc, version = 'hello.R')
# set default
opt$pattern %<>% `%||%`("*.csv")
opt$command %<>% `%||%`("filter")
opt$expression %<>% `%||%`("")


# if (opt$verbose) 
if (opt$debug) print(opt)

## HELPER functions -----------------------------------------------------------

get_files <- function(files=NULL, pattern="*.csv", indir=".") {
  if (is.null(files)) {
    indir2 = dirname(pattern)
    indir = ifelse(indir != ".", indir2, indir)  
    files = dir(indir, basename(pattern))
  }
  files # return
}

read_data <- function(input) {
  if (!file.exists(input)) {
    stop("[input]: not found: ", input)
  }
  ext <- tolower(tools::file_ext(input))
  switch(ext,
    # csv = readr::read_csv(input, col_types = readr::cols()),
    csv = fread(input),
    rds = readRDS(input),
    stop("Unknown file extension: ", ext)
  )
}

fread2 <- function(files, outfile=NULL, fun = fread, ...) {
  lst = purrr::map(files, fun, ...)
  df = do.call(rbind, lst)
  if (!is.null(outfile)) {
    ok("[write]: to %s", outfile)
    fwrite(df, outfile)
  }
  df
}

run <- function(cmd) {
  if (opt$verbose) print(cmd) else eval(parse(text = cmd))
}

log <- function() {
  if (!is.null(opt$outfile)) {
    ok("[write]: to %s", opt$outfile)
    fwrite(data, opt$outfile)
  }
}

## PARAMETER PROCESS
# files = with(opt, get_files(files, pattern, indir))

# if (opt$verbose) {
#   print(files)
# } else {
  data = fread2(opt$infile)

  if (!is.null(opt$command)) {
    sprintf("data <<- data %%>%% %s(%s)", opt$command, opt$expression) %>% run()
  }

  print2(data)
  log()
# }

# input = opt$file
# print(input)

# if (input == "stdin") {
#   if (opt$verbose) message("[input] reading CSV from stdin")
#   input <- readLines(input) |> trimws()
#   .data <- readr::read_csv(I(input), col_types = readr::cols())
# } else {
#   if (opt$verbose) message("[input] looks like an existing file: ", input)
#   .data <- read_data(input)
# }
# print(.data)

